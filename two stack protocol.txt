#include <iostream>
using namespace std;

class TwoStack {
    int* arr;
    int top1;
    int top2;
    int size;

public:
    TwoStack(int s) {
        this->size = s;
        top1 = -1;
        top2 = s;
        arr = new int[s];
    }

    void push1(int num) {
        if (top2 - top1 > 1) {
            top1++;
            arr[top1] = num;
        } else {
            cout << "Stack overflow for Stack 1" << endl;
        }
    }

    void push2(int num) {
        if (top2 - top1 > 1) {
            top2--;
            arr[top2] = num;
        } else {
            cout << "Stack overflow for Stack 2" << endl;
        }
    }

    int pop1() {
        if (top1 >= 0) {
            int ans = arr[top1];
            top1--;
            return ans;
        } else {
            cout << "Stack underflow for Stack 1" << endl;
            return -1;
        }
    }

    int pop2() {
        if (top2 < size) {
            int ans = arr[top2];
            top2++;
            return ans;
        } else {
            cout << "Stack underflow for Stack 2" << endl;
            return -1;
        }
    }
};

int main() {
    TwoStack ts(5); // Initialize two stacks with a total size of 5

    // Testing stack 1
    ts.push1(10);
    ts.push1(20);
    ts.push1(50);
    cout << "Popped from Stack 1: " << ts.pop1() << endl; // Output: 20
    cout << "Popped from Stack 1: " << ts.pop1() << endl; // Output: 10
    cout << "Popped from Stack 1: " << ts.pop1() << endl; // Output: Stack underflow for Stack 1

    // // Testing stack 2
    ts.push2(30);
    ts.push2(40);
    cout << "Popped from Stack 2: " << ts.pop2() << endl; // Output: 40
    cout << "Popped from Stack 2: " << ts.pop2() << endl; // Output: 30
    cout << "Popped from Stack 2: " << ts.pop2() << endl; // Output: Stack underflow for Stack 2

    // // Edge case: Pushing into both stacks
    ts.push1(50);
    ts.push2(60);
    ts.push1(70);
    ts.push2(80); // Should cause overflow
    return 0;
}
