import java.util.Stack;

public class Main {

    // Method to insert an element at the bottom of a stack
    public static void insertAtBottom(Stack<Integer> stack, int element) {
        // Base case: if stack is empty, push the element
        if (stack.isEmpty()) {
            stack.push(element);
            return;
        }

        // Pop the top element
        int num = stack.pop();

        // Recursive call to insert element at the bottom
        insertAtBottom(stack, element);

        // Push the popped element back on the stack
        stack.push(num);
    }

    // Method to reverse the stack
    public static void reverseStack(Stack<Integer> stack) {
        // Base case: if stack is empty, return
        if (stack.isEmpty()) {
            return;
        }

        // Pop the top element
        int num = stack.pop();

        // Recursive call to reverse the remaining stack
        reverseStack(stack);

        // Insert the popped element at the bottom of the stack
        insertAtBottom(stack, num);
    }

    public static void main(String[] args) {
        Stack<Integer> myStack = new Stack<>();
        myStack.push(7);
        myStack.push(1);
        myStack.push(4);
        myStack.push(5);

        System.out.println("Original Stack: " + myStack);

        // Reverse the stack
        reverseStack(myStack);

        System.out.println("Reversed Stack: " + myStack);
    }
}
