//rat maze problem 

class Solution{

private:
bool iSafe(int x, int y, int n, vector<vector<int>> visited,vector<vector<int>> &m){
    if((x>=0 && x<n && (y>=0 && y<n) && visited[x][y] == 0 && m[x][y] == 1){
retrn rue;}
else{
       return false;
     }
}

void solve(vector<vector<int>> &m, int n,vector<string>& ans, int x, int y,vector<vector<int>> visited,sring path){
//base case
/reahed x,y
if(x = n-1 && y== n-1){
ans.push_back(path);
return;      
}

visted[x][y]=1;
//down

int next = x+1;
int newy = y;
if(isSafe(newx, newy, n, visited, m)){
     path.push_back('D');
   solve(m,n,ans,newx, newy, path, visited);
path.pop_back();
} 

//left

 nextx = x;
newy = y-1;
if(isSafe(newx, newy, n, visited, m)){
     path.push_back('L');
   solve(m,n,ans,newx, newy, path, visited);
path.pop_back();
} 


//right

nextx = x;
newy = y+1;
if(isSafe(newx, newy, n, visited, m)){
     path.push_back('R');
   solve(m,n,ans,newx, newy, path, visited);
path.pop_back();
} 

//up

nextx = x-1;
newy = y;
if(isSafe(newx, newy, n, visited, m)){
     path.push_back('U');
   solve(m,n,ans,newx, newy, path, visited);
path.pop_back();
} 

visited[x][y]= 0;
}


public:
vector<string> findPath(vector<vector<int>> &m, int n){

vector<string> ans;
if(m[0][0] == 0)
{
return ans;
}

int srcx = 0;
int scry = 0;
         
vector<vector<int>> visited = m;

for(int i=0; i<n; i++){
for(int j=0; j<n; j++){
visited[i][j] = 0;
       }
}
string path = " ";
solve(m,n,ans,srcx,srcy,visited,path);
sort(ans.begin(), ans.end());
return ans;
}

};